{
  "openapi": "3.0.3",
  "info": {
    "title": "Online Verification for Travellers - Validation Service",
    "description": "Validation Service component of Online Verification for Travellers at https://github.com/minienw/onlineverification_overview.",
    "termsOfService": "-",
    "contact": {
      "name": "Steve Kellaway",
      "url": "https://www.linkedin.com/in/steve-kellaway-019ba7142/",
      "email": "steve.kellaway@mefitihe.com"
    },
    "license": {
      "name": "EUPL-1.2",
      "url": "https://spdx.org/licenses/EUPL-1.2.html"
    },
    "version": "0.0.1-SNAPSHOT"
  },
  "servers": [
    {
      "url": "http://localhost:9000",
      "description": "Inferred Url"
    }
  ],
  "tags": [
    {
      "name": "identity-controller",
      "description": "Identity Controller"
    },
    {
      "name": "validation-controller-v-2",
      "description": "Validation Controller V 2"
    }
  ],
  "paths": {
    "/identity": {
      "get": {
        "tags": [
          "identity-controller"
        ],
        "summary": "Get the configuration information about the hosted services.",
        "operationId": "WholeDocUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityResponse"
                }
              },
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/initialize/{subjectId}": {
      "post": {
        "tags": [
          "validation-controller-v-2"
        ],
        "summary": "Called by the airline/server providers POST /token to initialize some of the parameters of the subsequent POST /validate call by passing the AES IV and Subject Id.",
        "operationId": "initializeUsingPOST",
        "parameters": [
          {
            "name": "X-Version",
            "in": "header",
            "required": true,
            "allowReserved": false,
            "schema": {
              "type": "string",
              "enum": [
                "2.00"
              ]
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subjectId",
            "in": "path",
            "description": "subjectId",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidationInitializeRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationInitializeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Authorization token signature invalid or payload invalid."
          },
          "500": {
            "description": "Server Error.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/validate/{subjectId}": {
      "post": {
        "tags": [
          "validation-controller-v-2"
        ],
        "summary": "Performs the verification of a DCC and evaluates the business rules. Returns the JWT of ResultTokenPayload.",
        "operationId": "validateV2UsingPOST",
        "parameters": [
          {
            "name": "X-Version",
            "in": "header",
            "required": true,
            "allowReserved": false,
            "schema": {
              "type": "string",
              "enum": [
                "2.00"
              ]
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subjectId",
            "in": "path",
            "description": "subjectId",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body including invalid Response Token signature."
          },
          "401": {
            "description": "Authorization token signature invalid or payload invalid."
          },
          "410": {
            "description": "Subject does not exist."
          },
          "500": {
            "description": "Server Error."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "DCCFailableItem": {
        "title": "DCCFailableItem",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "customMessage": {
            "type": "string"
          },
          "param1": {
            "type": "integer",
            "format": "int32"
          },
          "param2": {
            "type": "integer",
            "format": "int32"
          },
          "param3": {
            "type": "integer",
            "format": "int32"
          },
          "ruleIdentifier": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "CustomFailure",
              "DateOfBirthOutOfRange",
              "InvalidCountryCode",
              "InvalidDateOfBirth",
              "InvalidRecoveryFirstTestDate",
              "InvalidRecoveryFromDate",
              "InvalidRecoveryToDate",
              "InvalidTargetDisease",
              "InvalidTestDate",
              "InvalidTestResult",
              "InvalidTestType",
              "InvalidVaccine14Days",
              "InvalidVaccineDate",
              "InvalidVaccineHolder",
              "InvalidVaccineProduct",
              "InvalidVaccineType",
              "MissingRequiredTest",
              "NeedFullVaccination",
              "RecoveryNotValid",
              "RedNotAllowed",
              "RequireSecondTest",
              "TestDateExpired",
              "TestMustBeNegative",
              "UndecidableFrom",
              "VocRequirePCROrAntigen",
              "VocRequireSecondAntigen",
              "VocRequireSecondPCR"
            ]
          }
        }
      },
      
      "DccExtract": {
        "title": "DccExtract",
        "required": [
          "dob",
          "fnt",
          "gnt"
        ],
        "type": "object",
        "properties": {
          "dob": {
            "type": "string",
            "description": "Date of birth value extracted from DCC e.g. 1979-04-14, 1901-08, 1950 etc."
          },
          "fnt": {
            "type": "string",
            "description": "Surname value (ICAO 9303 transliterated) extracted from DCC."
          },
          "gnt": {
            "type": "string",
            "description": "Given name value (ICAO 9303 transliterated) extracted from DCC."
          }
        }
      },
      "IdentityResponse": {
        "title": "IdentityResponse",
        "required": [
          "id",
          "service",
          "verificationMethod"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "service": {
            "type": "array",
            "description": "Services available, their endpoints and verification methods.",
            "items": {
              "$ref": "#/components/schemas/Service"
            }
          },
          "verificationMethod": {
            "type": "array",
            "description": "Verification methods - effectively a list of public keys to check signatures with. However, also contains public RSA encryption keys e.g. for DCC encryption.",
            "items": {
              "$ref": "#/components/schemas/VerificationMethod"
            }
          }
        }
      },
      "PublicKeyJwk": {
        "title": "PublicKeyJwk",
        "required": [
          "alg",
          "kid",
          "use",
          "x5c"
        ],
        "type": "object",
        "properties": {
          "alg": {
            "type": "string"
          },
          "kid": {
            "type": "string"
          },
          "use": {
            "type": "string"
          },
          "x5c": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResultTokenPayload": {
        "title": "ResultTokenPayload",
        "required": [
          "category",
          "exp",
          "iat",
          "iss",
          "result",
          "results",
          "sub"
        ],
        "type": "object",
        "properties": {
          "category": {
            "type": "array",
            "description": "e.g. Inter-Flight, Concert, Domestic, MassEvent > 1000, etc. Category which shall be reflected in the validation by additional rules/logic. If null, Standard Business Rule Check will apply. Default: Standard",
            "example": "Standard",
            "items": {
              "type": "string"
            }
          },
          "confirmation": {
            "type": "string",
            "description": "JWT of ConfirmationTokenPayload - The one to send to the airline."
          },
          "exp": {
            "type": "integer",
            "description": "Time of expiry in Unix epoch time.",
            "format": "int64"
          },
          "iat": {
            "type": "integer",
            "description": "Time of issue in Unix epoch time.",
            "format": "int64"
          },
          "iss": {
            "type": "string",
            "description": "Uri of the identity document for the issuing validation service."
          },
          "personalinfodccextract": {
            "description": "Names and date of birth extracted from the DCC.",
            "$ref": "#/components/schemas/DccExtract"
          },
          "result": {
            "type": "string",
            "description": "Final result of the evaluation - OK = Passed, NOK = Fail, CHK = Cross Check(OPEN)"
          },
          "results": {
            "type": "array",
            "description": "Results of the business rules evaluation.",
            "items": {
              "$ref": "#/components/schemas/DCCFailableItem"
            }
          },
          "sub": {
            "type": "string",
            "description": "Service provider (airline) identifier for the trip/traveller. GUID formatted as hex (no hyphens)."
          }
        }
      },

      "Service": {
        "title": "Service",
        "required": [
          "id",
          "name",
          "serviceEndpoint",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the Endpoint(must resolve to a Identity Document). All id values have to be prefixed by {serviceproviderurl} and a fragment value, e.g. https://servicepovider/validationservice#AccessCredentialService."
          },
          "name": {
            "type": "string",
            "description": "'Human-readable' name of service."
          },
          "serviceEndpoint": {
            "type": "string",
            "description": "Actual URI of endpoint."
          },
          "type": {
            "type": "string",
            "description": "Value from AccessTokenService, ConfirmationService, ServiceProvider, InitializeService or ValidationService."
          }
        }
      },
      "ValidateRequestBody": {
        "title": "ValidateRequestBody",
        "required": [
          "dcc",
          "encKey",
          "encScheme",
          "kid",
          "sig",
          "sigAlg"
        ],
        "type": "object",
        "properties": {
          "dcc": {
            "type": "string",
            "description": "Base 64 of the AES encrypted DCC artefact."
          },
          "encKey": {
            "type": "string",
            "description": "Unused."
          },
          "encScheme": {
            "type": "string",
            "description": "Encryption scheme used on the DCC artefact - currently only 'RsaOaepWithSha256AesCbcScheme'"
          },
          "kid": {
            "type": "string",
            "description": "Kid of the RSA public key used to encrypt the AES secret key used to encrypt the DCC artefact."
          },
          "sig": {
            "type": "string",
            "description": "Base64 of the digest of the encrypted DCC."
          },
          "sigAlg": {
            "type": "string",
            "description": "Digest algorithm identifier, currently always 'SHA256withECDSA'"
          }
        }
      },
      "ValidationAccessTokenPayloadCondition": {
        "title": "ValidationAccessTokenPayloadCondition",
        "required": [
          "category",
          "coa",
          "cod",
          "lang",
          "poa",
          "pod",
          "roa",
          "rod",
          "type",
          "validTo",
          "validationClock",
          "validfrom"
        ],
        "type": "object",
        "properties": {
          "category": {
            "type": "array",
            "description": "e.g. Inter-Flight, Concert, Domestic, MassEvent > 1000, etc. Category which shall be reflected in the validation by additional rules/logic. If null, Standard Business Rule Check will apply. Default: Standard",
            "example": "Standard",
            "items": {
              "type": "string"
            }
          },
          "coa": {
            "type": "string",
            "description": "Country of arrival - ISO 3166-1 alpha-2 e.g. NL"
          },
          "cod": {
            "type": "string",
            "description": "Country of departure - ISO 3166-1 alpha-2 e.g. NL"
          },
          "lang": {
            "type": "string",
            "description": "Display language to use in wallet. Currently ignored by wallet. Use ISO 639-1 standard language codes?"
          },
          "poa": {
            "type": "string",
            "description": "Port of arrival - which standard?"
          },
          "pod": {
            "type": "string",
            "description": "Port of departure - which standard?"
          },
          "roa": {
            "type": "string",
            "description": "Country of arrival - ISO 3166-2 without country."
          },
          "rod": {
            "type": "string",
            "description": "Country of departure - ISO 3166-2 without country."
          },
          "type": {
            "type": "array",
            "description": "TBD. Unused?",
            "items": {
              "type": "string"
            }
          },
          "validTo": {
            "type": "string",
            "description": "DCC must be valid up to this date. ISO8601 with time and offset e.g. 2021-01-29T12:00:00+01:00."
          },
          "validationClock": {
            "type": "string",
            "description": "Date where the DCC must be validatable. ISO8601 with time and offset e.g. 2021-01-29T12:00:00+01:00."
          },
          "validfrom": {
            "type": "string",
            "description": "DCC must be valid from this date. ISO8601 with time and offset e.g. 2021-01-29T12:00:00+01:00."
          }
        }
      },
      "ValidationAccessTokenPayload": {
        "title": "ValidationAccessTokenPayload",
        "required": [
          "ValidationCondition",
          "ValidationType",
          "ValidationVersion",
          "aud",
          "exp",
          "iat",
          "iss",
          "jsonTokenIdentifier",
          "jti",
          "serviceProvider",
          "sub",
          "subject",
          "subjectUri",
          "t",
          "v",
          "vc"
        ],
        "type": "object",
        "properties": {
          "ValidationCondition": {
            "$ref": "#/components/schemas/ValidationAccessTokenPayloadCondition"
          },
          "ValidationType": {
            "type": "string",
            "enum": [
              "Cryptographic",
              "Full",
              "Structure"
            ]
          },
          "ValidationVersion": {
            "type": "string"
          },
          "aud": {
            "type": "string",
            "description": "Uri of the validation service extracted from the services identity document, with the subject appended e.g. https://validationprovider/validate/AAAAAAAAAABBBBBBBBBB"
          },
          "exp": {
            "type": "integer",
            "description": "Time of expiry in Unix epoch time.",
            "format": "int64"
          },
          "iat": {
            "type": "integer",
            "description": "Time of issue in Unix epoch time.",
            "format": "int64"
          },
          "iss": {
            "type": "string",
            "description": "Uri of the identity document of the issuing service."
          },
          "jsonTokenIdentifier": {
            "type": "string"
          },
          "jti": {
            "type": "string"
          },
          "serviceProvider": {
            "type": "string"
          },
          "sub": {
            "type": "string",
            "description": "Service provider (airline) identifier for the trip/traveller. GUID formatted as hex (no hyphens)."
          },
          "subject": {
            "type": "string"
          },
          "subjectUri": {
            "type": "string"
          },
          "t": {
            "type": "string",
            "description": "Always 2.",
            "enum": [
              "Cryptographic",
              "Full",
              "Structure"
            ]
          },
          "v": {
            "type": "string",
            "description": "TBD. Reflect the protocol version? e.g. 2.00."
          },
          "vc": {
            "description": "TDB...",
            "$ref": "#/components/schemas/ValidationAccessTokenPayloadCondition"
          },
          "whenExpires": {
            "type": "integer",
            "format": "int64"
          },
          "whenIssued": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ValidationInitializeRequestBody": {
        "title": "ValidationInitializeRequestBody",
        "required": [
          "alg",
          "pubKey"
        ],
        "type": "object",
        "properties": {
          "alg": {
            "type": "string",
            "description": "For calculating the digest of the encrypted DCC artifact - always use ECDsaWithSha256."
          },
          "nonce": {
            "type": "string",
            "description": "Securely generated byte array of length 16. Used as the IV when using AES to encrypt the DCC artefact."
          },
          "pubKey": {
            "type": "string",
            "description": "For calculating the digest of the encrypted DCC artifact - ECDSA public key generated by the wallet in ASN1->DER->BASE64 format."
          }
        }
      },
      "ValidationInitializeResponse": {
        "title": "ValidationInitializeResponse",
        "required": [
          "aud",
          "encKey",
          "exp",
          "signKey",
          "sub"
        ],
        "type": "object",
        "properties": {
          "aud": {
            "type": "string",
            "description": "Uri of the validation service extracted from the services identity document, with the subject appended e.g. https://validationprovider/validate/AAAAAAAAAABBBBBBBBBB"
          },
          "encKey": {
            "description": "Unused for some reason. See response headers.",
            "$ref": "#/components/schemas/PublicKeyJwk"
          },
          "exp": {
            "type": "integer",
            "description": "Time of expiry in Unix epoch time.",
            "format": "int64"
          },
          "signKey": {
            "description": "Unused for some reason. See response headers.",
            "$ref": "#/components/schemas/PublicKeyJwk"
          },
          "sub": {
            "type": "string",
            "description": "Service provider (airline) identifier for the trip/traveller. GUID formatted as hex (no hyphens)."
          }
        }
      },
      "VerificationMethod": {
        "title": "VerificationMethod",
        "required": [
          "controller",
          "id",
          "publicKeyJwk",
          "type"
        ],
        "type": "object",
        "properties": {
          "controller": {
            "type": "string",
            "description": "..."
          },
          "id": {
            "type": "string",
            "description": "All ID values must be prefixed by {serviceproviderurl} and a fragment value, e.g. https://serviceprovider/verificationmethod#AccessTokenSigning-1. See documentation."
          },
          "publicKeyJwk": {
            "description": "Public key in JWK format.",
            "$ref": "#/components/schemas/PublicKeyJwk"
          },
          "type": {
            "type": "string",
            "description": "Always JsonWebKey2020."
          }
        }
      }
    },
    "securitySchemes": {
      "ValidationAccessTokenJWT": {
        "type": "http",
        "description": "Value is signed JWT of ValidationAccessTokenPayload",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}